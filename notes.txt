--- Configuring Git ---
- Set global name and email:
	> git config --global user.name "Curtis Mitchell"
	> git config --global user.email curtisjmitchell1@gmail.com

- Edit global git settings:
	> git config --global -e

- Set default diff tool:
	> git config --global diff.tool vscode

- Tell git how to launch VS Code:
	> git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"

- Configure end of lines (windows has carriage return and line feed (\r\n) while macOS and linux just have line feed (\n)):
	- For Windows:
		> git config --global core.autocrlf true
	- For macOS and Linux:
		> git config --global core.autocrlf input

- Aliases:
	> git config --global alias.mycommand "log --pretty=format:'%an committed %h'"


--- Creating Snapshots ---
- View changes with visual diff tool:
	> git difftool

- Show files in staging area:
	> git ls-files

- Add file to .gitignore at the same time as creating it:
	> echo file.txt > .gitignore
- Append to .gitignore:
	> echo file1.txt >> .gitignore

- Files committed before adding .gitignore will not be effected by adding them to the file
- You have to remove them from the staging area:
	> git rm --cached file1.js


--- Browsing History ---
- Show repo status (short version):
	> git status -s

- Show commit history (newest to oldest):
	> git log
	- Space to go to next page
	- Can use up and down arrows
	- q to quit
	- Summary of all commits:
		--oneline
	- Show files that have been changed in each commit:
		--stat
	- Show changes in files:
		--patch
	- Filter commits:
		- By last 3 commits:
			-3
		- By author:
			--author="Mosh"
		- By date:
			--before="2020-08-17"
			--after="2020-08-17"
				- can also use times like "yesterday" or "two days ago"
		- By commit message:
			--grep="GUI"
		- By content:
			- All commits that have added or removed this function:
			-S"hello()"
		- By commits in a particular range:
			fb0d184..edb3594
		- By commits that have modified particular files:
			-- file.txt
			- Use after other flags

- Viewing commits
	- Show commit that is two steps back from head (latest commit):
		> git show HEAD~2
	- Show a specific file from a selected commit:
		> git show HEAD~2:sections/creating-snapshots/staging-changes.txt
	- Show files that have been changed in a selected commit:
		--name-only
		--name-status

- View changes from a selected commit:
	> git diff 50db987
	- Show a list of files that have been changed:
		--name-status

- View changes across commits:
	> git diff HEAD~2 HEAD

- Restore working directory to a specific commit (checkout):
	> git checkout dat27ed
	- Puts you in detached head state (head pointer moves to specific commit instead of pointing to a branch)
		- Should only view, not commit
	- Reattach head pointer to master branch:
		> git checkout master
	- Show all commits when head pointer is not at tip of branch:
		> git log --all

- Finding bugs using bisect
	- Start bisect operation:
		> git bisect start
	- Tell git which commit is a bad commit (has a bug), in this example it will be the head:
		> git bisect bad
	- Tell git which commit is a good commit (doesn't have the bug):
		> git bisect good ca49180
	- Can incrementally test code after half of the remaining commits at a time
	- Will show you whether the bug was introduced before or after the bisect
	- Show that the bug hasn't been introduced after bisect:
		> git bisect good
	- Show that the bug is there after bisect:
		> git bisect bad
	- Stop bisect operation (reattach head pointer to branch):
		> git bisect reset

- Show all the people that have contributed to a project:
	> git shortlog
		- Shows name, number of commits, and summary of commit messages
		- Sort output based on number of commits per author
			-n
		- Suppress commit messages
			-s
		- Show email addresses:
			-e
		- Can use filtering options here too

- Restore a deleted file
	- Find commits that have touched the file:
		> git log --oneline -- file.txt
	- Checkout file from previous commit that had the file in it:
		> git checkout a642e12 file.txt
	- Commit file after checkout:
		> git commit -m "restore file.txt"
	
- Finding the author using blame
	- show details about all lines in a file:
		> git blame file.txt
			- Show author's email
				-e
			- Filter by first three lines:
				-L 1,3

- Tagging (label commits)
	- Tag a previous commit with version 1.0:
		> git tag v1.0 5e7828
	- Show all tags:
		> git tag
		- Show messages with them:
			-n
	- Create an annotated tag with more info:
		> git tag -a v1.1 -m "My version 1.1"
	- Delete a tag:
		> git tag -d v1.1


--- Branching ---
- Create a new branch:
	> git branch <branch name>
	
- Show a list of branches:
	> git branch
	- there is a * next to current branch

- Change current branch:
	> git switch <branch name>

- Rename branch:
	> git branch -m <old name> <new name>

- View commits across all branches:
	> git log --oneline --all

- Delete a branch:
	> git branch -d <branch name>

- Create and switch to a branch at the same time:
	> git switch -C <branch name>

- Comparing branches (show all commits in one branch that are not in another):
	> git log master..bugfix/signup-from
	- Show changes instead:
		> git diff master..bugfix/signup-form
		- If you are already on master, you can do:
			> git diff bugfix/signup-form
		- Show only effected files:
			--name-status

- Stash changes (need to use if you make changes on a branch and don't commit before switching to another branch):
	> git stash push -m "New tax rules."

- List stashes:
	> git stash list

- Show changes in a stash:
	> git stash show stash@{0}
	- Can shorten by just using index number:
		> git stash show 0

- Apply stash to working directory:
	> git stash apply 0

- Remove stash (should do after applying):
	> git stash drop 0

- Remove all stashes:
	> git stash clear

-- Merging --
- Fast-forward merge (if the branches have not diverged):
	- Bring pointer of source branch forward after committing on another branch
	- Remove extra branch
	- Does not create a new commit for the merge

- Three-way merge (if the branches have diverged):
	- After secondary branch is ahead of source, make an additional commit on source branch (branches are diverged)
	- When we merge, git creates a commit that combines the changes from the two branches
		- Merge is based on three different commits: the common ancestor of our branches (before code), the tips of both branches (after code)

- Use graph graph flag with log to better visualize branches:
	> git log --oneline --all --graph

- Merge changes from a another branch into current branch:
	> git merge bugfix/signup-form
	- Force git to not use fast-forward merge (create a new commit for the merge):
		> git merge --no-ff bugfix/signup-form

- Disable fast-forward in current repo:
	> git config ff no
	- To apply to all repos:
		> git config --global ff no

- View list of branches that we have merged into current branch:
	> git branch --merged

- View list of branches that have not been merged into current branch:
	> git branch --no-merged

- If there are conflicts in the files that are being merged, Git will stop the merge process and you will have to resolve them manually:
	- See paths of files that have conflicts:
		> git status
		- Look at "Unmerged paths:"
	- Open with VS Code to resolve conflicts:
		> code <path to file>
	- Can also manually edit the file and select proper changes wile deleting the markers created by Git
	- Shouldn't introduce new changes while merging
	- Add the files to the staging area that we just resolved conflicts for:
		> git add <path to file>

- Abort a merge (if you have conflicts):
	> git merge --abort

- Undoing a faulty merge (only if you haven't shared that history with others):
	- Move head pointer back to one commit before merge:
		> git reset --hard HEAD~1
			- Options when resetting commits:
				--soft : head pointer points to a different snapshot, staging area and working directory are not effected
				--mixed (default option): new snapshot goes to staging area, working directory not effected
				--hard : new snapshot goes to working directory as well (state that we were in before merge)

- Revert last commit (if history has been shared with others):
	> git revert -m 1 HEAD
		- "-m 1" means first parent
		- "HEAD" is the target commit

- Squash merging: use to create a single commit that is representative of all the changes in the branch
	- Used to have a clean, linear history when we don't need to keep track of the full history
	- Use squash flag with normal merge command:
		> git merge --squash <branch name>
		- Adds changes from the merge to the staging area
		- Need to make the commit to represent all changes in the squashed branch
			> git commit -m "Squashed merge"
		- Force deletion of branch to avoid confusion:
			> git branch -D <branch name>

- Rebasing: Can change the base node of a branch to have the branch be based off of a more recent commit
	- Allows us to have a linear path from branch to master
	- Rewrites history, so only use for local branches and commits
	- Change target / current branch's base to the last commit on master
		> git rebase master
			- If there is a conflict, resolve it manually and run the command:
				> git rebase --continue	
					- Can also use:
						--skip
						--abort
					- Remove .orig files after resolving conflicts:
						> git clean -fd

- Cherry picking: Used to take specific commit from anther branch, and apply it on top of master:
	> git cherry-pick <commit id>

- Picking a file from another branch:
	> git restore --source=<branch name> -- <file name>


--- Collaboration ---
- Clone a repository:
	> git clone <repo url>

- Show a list of remote repositories:
	> git remote
		-v for more details

- Show how our local and remote branches are diverging:
	> git branch -vv

- Download commits off of remote repository:
	> git fetch <remote name (assumes origin if left out)> <branch name (optional)>
		- Still need to merge remote changes into local branch:
			> git merge origin/master

- Pull command combines fetch and merge:
	> git pull <remote name> <branch name>
		- Will perform a three way merge if there are local changes that need to be merged with remote
		--rebase : preserve linear history

- Send commits to remote repository:
	> git push <remote name (assumes origin)> <branch name (assumes current branch)>
		- If there are changes made to remote that you don't have yet, a pull and merge is necessary first

- Tags are only saved locally by default. You need to push them to remote manually:
	> git push origin <tag name>
	- Remove a tag from remote (does not remove locally):
		> git push origin --delete <tag name>

- Show remote tracking branches:
	> git branch -r

- Push a branch to remote:
	> git push -u origin <branch name>
		-u is short for set upstream
	- Delete branch from remote (does not delete locally):
		> git push -d origin <branch name>

- You can create a branch on GitHub, then bring it to your local repository with:
	> git fetch
	- Still need to create the local branch to match the remote:
		> git switch -C <branch name> origin/<branch name>

- To remove a remote tracking branch that has already been removed from origin:
	> git remote prune origin