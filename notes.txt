--- Configuring Git ---
- Set global name and email:
	> git config --global user.name "Curtis Mitchell"
	> git config --global user.email curtisjmitchell1@gmail.com

- Edit global git settings:
	> git config --global -e

- Set default diff tool:
	> git config --global diff.tool vscode

- Tell git how to launch VS Code:
	> git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"

- Configure end of lines (windows has carriage return and line feed (\r\n) while macOS and linux just have line feed (\n)):
	- For Windows:
		> git config --global core.autocrlf true
	- For macOS and Linux:
		> git config --global core.autocrlf input

- Aliases:
	> git config --global alias.mycommand "log --pretty=format:'%an committed %h'"


--- Creating Snapshots ---
- View changes with visual diff tool:
	> git difftool

- Show files in staging area:
	> git ls-files

- Add file to .gitignore at the same time as creating it:
	> echo file.txt > .gitignore
- Append to .gitignore:
	> echo file1.txt >> .gitignore

- Files committed before adding .gitignore will not be effected by adding them to the file
- You have to remove them from the staging area:
	> git rm --cached file1.js


--- Browsing History ---
- Show commit history (newest to oldest):
	> git log
	- Space to go to next page
	- Can use up and down arrows
	- q to quit
	- Summary of all commits:
		--oneline
	- Show files that have been changed in each commit:
		--stat
	- Show changes in files:
		--patch
	- Filter commits:
		- By last 3 commits:
			-3
		- By author:
			--author="Mosh"
		- By date:
			--before="2020-08-17"
			--after="2020-08-17"
				- can also use times like "yesterday" or "two days ago"
		- By commit message:
			--grep="GUI"
		- By content:
			- All commits that have added or removed this function:
			-S"hello()"
		- By commits in a particular range:
			fb0d184..edb3594
		- By commits that have modified particular files:
			-- file.txt
			- Use after other flags

- Viewing commits
	- Show commit that is two steps back from head (latest commit):
		> git show HEAD~2
	- Show a specific file from a selected commit:
		> git show HEAD~2:sections/creating-snapshots/staging-changes.txt
	- Show files that have been changed in a selected commit:
		--name-only
		--name-status

- View changes from a selected commit:
	> git diff 50db987
	- Show a list of files that have been changed:
		--name-status

- View changes across commits:
	> git diff HEAD~2 HEAD

- Restore working directory to a specific commit (checkout):
	> git checkout dat27ed
	- Puts you in detached head state (head pointer moves to specific commit instead of pointing to a branch)
		- Should only view, not commit
	- Reattach head pointer to master branch:
		> git checkout master
	- Show all commits when head pointer is not at tip of branch:
		> git log --all

- Finding bugs using bisect
	- Start bisect operation:
		> git bisect start
	- Tell git which commit is a bad commit (has a bug), in this example it will be the head:
		> git bisect bad
	- Tell git which commit is a good commit (doesn't have the bug):
		> git bisect good ca49180
	- Can incrementally test code after half of the remaining commits at a time
	- Will show you whether the bug was introduced before or after the bisect
	- Show that the bug hasn't been introduced after bisect:
		> git bisect good
	- Show that the bug is there after bisect:
		> git bisect bad
	- Stop bisect operation (reattach head pointer to branch):
		> git bisect reset

- Show all the people that have contributed to a project:
	> git shortlog
		- Shows name, number of commits, and summary of commit messages
		- Sort output based on number of commits per author
			-n
		- Suppress commit messages
			-s
		- Show email addresses:
			-e
		- Can use filtering options here too

- Restore a deleted file
	- Find commits that have touched the file:
		> git log --oneline -- file.txt
	- Checkout file from previous commit that had the file in it:
		> git checkout a642e12 file.txt
	- Commit file after checkout:
		> git commit -m "restore file.txt"
	
- Finding the author using blame
	- show details about all lines in a file:
		> git blame file.txt
			- Show author's email
				-e
			- Filter by first three lines:
				-L 1,3

- Tagging (label commits)
	- Tag a previous commit with version 1.0:
		> git tag v1.0 5e7828
	- Show all tags:
		> git tag
		- Show messages with them:
			-n
	- Create an annotated tag with more info:
		> git tag -a v1.1 -m "My version 1.1"
	- Delete a tag:
		> git tag -d v1.1

